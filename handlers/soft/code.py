import os
import time
import asyncio

from aiogram import Bot

from telethon import events
from telethon import TelegramClient
from telethon.errors import *
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.functions.messages import SetTypingRequest
from telethon.tl.types import SendMessageTypingAction

from config import params
from utils.loguru import logger
from database.requests.manager import RequestsManager


clients = {}
current_task_client = {}


class RegisterClient:
    def __init__(self, phone: str):
        self.client = TelegramClient(
            session=f'sessions/session-{phone}', 
            api_id=params['api_id'], 
            api_hash=params['api_hash'], 
            device_model=params['device_model'], 
            system_version=params['system_version'], 
            app_version=params['app_version']
        )
        self.phone = phone
        self.connected = False
        self.lock = asyncio.Lock()


    async def __aenter__(self):
        if not self.client.is_connected(): 
            await self.client.connect()
            self.connected = True
            clients[self.phone] = self  
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {self.phone} –ø–æ–¥–∫–ª—é—á–µ–Ω.")
        return self


    async def __aexit__(self, exc_type, exc, tb):
        await self.disconnect_account()


    async def disconnect_account(self):
        await self.client.disconnect()
        clients.pop(self.phone, None) 
        print(f"‚ùå –ö–ª–∏–µ–Ω—Ç {self.phone} –æ—Ç–∫–ª—é—á–µ–Ω.")
        return True


    async def send_phone_code(self):
        try:
            if not self.connected:  
                await self.client.connect()
                
            print(f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä {self.phone}...")
            send_code = await self.client.send_code_request(self.phone)
            time.sleep(2)
            return True, send_code.phone_code_hash
        except PhoneNumberInvalidError:
            return False, '‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!'
        except Exception as e:
            return self.log_error(e)


    async def register_account(self, phone_code_hash: str, code: str):
        try:
            if not self.client.is_connected():  
                await self.client.connect()
                
            print(f"üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç {self.phone}...")
            await self.client.sign_in(phone=self.phone, code=code, phone_code_hash=phone_code_hash)
            return True, await self.client.get_me()
        except SessionPasswordNeededError:
            return False, 'üîí –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA'
        except PhoneCodeInvalidError:
            return False, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!'
        except PhoneCodeExpiredError:
            return False, '‚è≥ –í—Ä–µ–º—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ.'
        except Exception as e:
            return self.log_error(e)
        finally: await self.client.disconnect()


    async def join_group(self, chat_url: str, admin_chat: str, manager: RequestsManager, spam_chat: str, bot: Bot):
        async with self.lock:
            try:
                task_current = current_task_client.get(self.client, None)
                if task_current:
                    if not task_current.done() or task_current.done():
                        print("Cancelling pending task.")
                        task_current.cancel()
                        try:
                            await task_current
                        except asyncio.CancelledError:
                            pass 

                if not self.client.is_connected():
                    await self.client.connect()

                print(f"üîπ {self.phone} –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –≥—Ä—É–ø–ø—É {chat_url}...")

                try:
                    # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ –≤ —á–∞—Ç –ø–æ URL
                    await self.client(ImportChatInviteRequest(hash=chat_url.replace("https://t.me/+", '').strip()))
                    print(f"‚úÖ {self.phone} —É—Å–ø–µ—à–Ω–æ –≤–æ—à—ë–ª –≤ –≥—Ä—É–ø–ø—É {chat_url}")

                    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π
                    current_task_client[self.client] = asyncio.create_task(
                        self.listen_for_messages(chat_id=spam_chat, manager=manager, admin_chat_id=admin_chat, bot=bot))

                    return True, None
                except RPCError as e:
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç
                    error_message = f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ {self.phone} –≤ –≥—Ä—É–ø–ø—É {chat_url}: {e}"
                    print(error_message)
                    await self.client.disconnect()
                    return False, error_message

            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                return self.log_error(e)
            

    async def message_handler(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            user = await self.client.get_me()

            if event.sender_id == user.id:

                logger.info(f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.sender_id}: {event.message.text}")

                chats = await self.manager.user.get_chats_ids(admin_chat_uid=self.admin_chat_id)
                logger.info(f"–ß–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {chats}")

                reply_to_text = None
                if event.message.reply_to:
                    try:
                        reply_message = await event.message.get_reply_message()
                        reply_to_text = reply_message.text if reply_message else None
                        logger.info(f"üìå –†–µ–ø–ª–∞–π –Ω–∞: {reply_to_text}")
                    except Exception as e:
                        logger.error(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ø–ª–∞—è: {e}")

                media = None
                if event.message.media:
                    media = event.message.photo or event.message.video or event.message.document

                for chat in chats:
                    chat = int(chat)
                    reply_to_msg_id = None
                    
                    try:
                        await self.client(SetTypingRequest(chat, SendMessageTypingAction()))
                        await asyncio.sleep(2)

                        if reply_to_text:
                            async for msg in self.client.iter_messages(chat, limit=50):
                                if msg.text and msg.text.strip() == reply_to_text.strip():
                                    reply_to_msg_id = msg.id
                                    logger.info(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ø–ª–∞—è –≤ {chat}: {reply_to_msg_id}")
                                    break
                            else:
                                logger.warning(f"‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ø–ª–∞—è –≤ {chat} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                        if media:
                            await self.client.send_file(entity=chat, file=media, caption=event.message.text, reply_to=reply_to_msg_id)
                        else:
                            await self.client.send_message(entity=chat, message=event.message.text, reply_to=reply_to_msg_id)
                        
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat} (—Ä–µ–ø–ª–∞–π –∫ {reply_to_msg_id})")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat}: {e}")
                        await self.bot.send_message(chat_id=self.admin_chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat}: {e}")

        except Exception as e:
            logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await self.bot.send_message(chat_id=self.admin_chat_id, text=f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


    async def listen_for_messages(self, chat_id: str, manager: RequestsManager, admin_chat_id: str, bot: Bot):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤."""
        clients[self.phone] = self
        self.admin_chat_id = admin_chat_id
        self.bot = bot
        self.manager = manager

        try:
            await self.client.connect()

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
            self.client.remove_event_handler(self.message_handler)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.client.add_event_handler(self.message_handler, events.NewMessage(chats=int(chat_id)))

            logger.info(f"üëÇ {self.phone} —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}...")

        except Exception as e:
            logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await bot.send_message(chat_id=admin_chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


    def log_error(self, e):
        error_mapping = {
            PhoneNumberInvalidError: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            SessionPasswordNeededError: "üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è (2FA). –í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.",
            PhoneCodeInvalidError: "‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            PhoneCodeExpiredError: "‚è≥ –í—Ä–µ–º—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.",
            ChatAdminRequiredError: "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
            UserAlreadyParticipantError: "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.",
            RPCError: "üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ RPC. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º Telegram.",
            
            # üî¥ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏
            UserDeactivatedBanError: "üö´ –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Telegram.",
            UserIsBlockedError: "üîï –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª.",
            FloodWaitError: "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            ChatWriteForbiddenError: "üîá –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç —á–∞—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø—Ä–∞–≤–∞.",
            PeerFloodError: "üö® –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.",
            MessageTooLongError: "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç.",
            ChannelPrivateError: "üîí –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π.",
            UserRestrictedError: "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö Telegram.",
            MessageIdInvalidError: "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ."
        }

        error_message = error_mapping.get(type(e), f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
        print(f"üö® –û—à–∏–±–∫–∞ ({self.phone}): {error_message}")
        return False, error_message


async def send_phone_code_user(phone: str):
    async with RegisterClient(phone) as user_client:
        return await user_client.send_phone_code()


async def register_phone_code(phone: str, phone_code_hash: str, code: str):
    async with RegisterClient(phone) as user_client:
        status, resp = await user_client.register_account(phone_code_hash, code)
        return status, resp


async def join_from_chats(
        phone_url_map: dict[str, str], admin_chat: str, manager: RequestsManager, spam_chat: str, bot: Bot):
    tasks = []
    response_text = ""
    success_count = 0
    failed_accounts = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É (–Ω–æ–º–µ—Ä, —á–∞—Ç)
    for phone, url in phone_url_map.items():
        if (clients.get(phone, None)):
            client = clients[phone]
        else:
            client = RegisterClient(phone)

        # –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        task = asyncio.create_task(client.join_group(chat_url=url, admin_chat=admin_chat, manager=manager, spam_chat=spam_chat, bot=bot))
        tasks.append(task)

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    responses = await asyncio.gather(*tasks)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for (phone, url), (status, error) in zip(phone_url_map.items(), responses):
        if status:
            success_count += 1
        else:
            failed_accounts.append({"phone": phone, "chat": url, "error": error})

    response_text += "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç—ã:\n"
    response_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏: {success_count}/{len(phone_url_map)}\n"
    
    if failed_accounts:
        response_text += "‚ùå –û—à–∏–±–∫–∏:\n"
        for acc in failed_accounts:
            response_text += f"- {acc['phone']} (–ß–∞—Ç: {acc['chat']}): {acc['error']}\n"
    
    return {"success": success_count, "failed": failed_accounts, "response_text": response_text}


async def start_listen_message(phone: str, chat_id: str, manager: RequestsManager, admin_chat_id: str, bot: Bot):
    user_client = RegisterClient(phone)

    try:
        await user_client.listen_for_messages(chat_id=chat_id, manager=manager, admin_chat_id=admin_chat_id, bot=bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ: {e}") 


async def disconect_app(phone: str):
    if phone in clients:
        print(clients[phone])
        await clients[phone].disconnect_account()
        await asyncio.sleep(1)
        os.remove(f"sessions/session-{phone}.session")
        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        return True
    else:
        print(f"‚ùå –ö–ª–∏–µ–Ω—Ç {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö!")
        return False
